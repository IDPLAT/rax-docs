#!/bin/bash -e

## The version of Python we're building with in Jenkins. Changing this will cause a new Python
## to be installed on Jenkins using pyenv. Cleanup is left as a manual task.
## It's highly recommended that this version stay in sync with the version that the Dockerfile
## is based on so that devs and Jenkins build the same way.
PYVERSION=3.6.13
export PYVERSION

## Where pyenv lives on Jenkins. The home partition is 42G, so it should be a fine place to
## keep things. I changed from the default of "$HOME/.pyenv" just to make it explicit what's
## using this pyenv home.
PYENV_ROOT="$HOME/.pyenv-rax-docs"
export PYENV_ROOT

## The version of vale we're going to install and use. Changing this will download a new version
## of vale and extract it into /usr/local/lib. The install task will symlink the newer version to
## /usr/local/bin, but it will not clean up the old version left in the the lib dir.
VALE_VERSION=2.4.0
export VALE_VERSION

## Delay output a bit to make it feel more comfortable for a human. Setting SPEED=true will disable
## the delay so tests will run quickly.
function pause {
    [ "$SPEED" = true ] || sleep 1
}

# Versioning the wrapper and internal script gives some future-proofing so that a new wrapper script coudld be written,
# and we could still support both the old and new versions.
[ "$RAX_DOCS_WRAPPER_VERSION" = "1" ] || {
    echo "This script is meant to work with version 1 of the wrapper script."
    echo ""
    pause
    exit 1
}

# Helper function to make failures consistent. Pass a message, and this will write it to stderr and exit appropriately.
SCRIPTNAME="$(basename "$0")"
function fail {
    echo -e "$SCRIPTNAME: Fatal: $1" 1>&2
    exit 1
}

function status {
    echo "RAX Docs Toolkit"
    VERSION=$(git -C .rax-docs/repo describe HEAD --tags 2>&1) || VERSION=$(git -C .rax-docs/repo describe HEAD --tags --always)
    echo "Version: $VERSION"
    echo "Install path: .rax-docs"
}

# Called by wrapper script install after it clones the project. The wrapper is the script downloaded by users.
# It's kept as minimal as possible so that it's small and doesn't change often. Most of the logic is in here.
# This function installs the toolkit in the current directory. The version being installed is what has already
# been cloned. The version is passed here only for record-keeping.
function internal_install {
    # version is passed from the outer script
    CHOSEN_VERSION="$1"
    install_status_check
}

# Checks for dirty working tree. Installation can proceed, but user is prompted to abort and clean up first. The wrapper script
# and the install directory are excluded from the check.
function install_status_check {
    # If we're not in a git repo, ignore this part
    git rev-parse &> /dev/null && {
	STATUS=$(git status --porcelain | grep -v '^.. rax-docs$' | grep -v '^.. \.rax-docs/' | grep -v '^.. \.gitmodules$' || true)
	if [ "$STATUS" != "" ]; then
	    echo "You have uncommitted changes!"
	    echo ""
            echo "I *STRONGLY RECOMMEND* that you commit all of your local changes before proceeding."
            echo "This script makes changes to files in this directory that will need to be committed,"
            echo "and the only way of rolling back is with git. Other changes may interfere, get"
            echo "overwritten, and make it difficult to recover if the installation fails."
            echo ""
            echo "You have been warned."
            echo ""
	    pause
            read -rp "Are you ABSOLUTELY SURE you want to install without committing your other changes? [y/N] " CONFIRM
	    if [ "$CONFIRM" = "" ] || [ "$CONFIRM" = "y" ] || [ "$CONFIRM" = "Y" ]; then
		echo ""
		echo "On your own head be it."
		echo ""
		pause
	    else
		echo ""
		echo "A wise choice, young padawan."
		rm -rf .rax-docs
		pause
		return 2
            fi
	fi
    }
    install_version_set
}

# After the toolkit is cloned, this checks out the version selected by the user and resolves it
# to a version that can be stored in the config, if necessary.
function install_version_set {
    if [ -z "$CHOSEN_VERSION" ]; then
	echo "Installing latest toolkit. This will use the latest master, which SHOULD be stable;"
	echo "however, it's usually better to stick to tagged release versions. If you continue,"
	echo "your installation will then be pinned to the current master commit and WILL NOT update"
	echo "along with the branch. That would introduce crazy instability."
	echo ""
	echo "You can specify a version to install with 'install <version>'."
	echo ""
	pause
	read -rp "Are you sure you want to install latest? [Y/n] " CONFIRM
	if [ "$CONFIRM" = "" ] || [ "$CONFIRM" = "y" ] || [ "$CONFIRM" = "Y" ]; then
	    CHOSEN_VERSION=master
	    DISCOVER_VERSION=true
	else
	    echo ""
	    echo "Not installing latest."
	    rm -rf .rax-docs
	    exit 2
	fi
    else
	echo "Installing toolkit version $CHOSEN_VERSION."
	DISCOVER_VERSION=false
    fi
    echo ""
    # Don't store a branch as the version. That would lead to non-reproducible builds due to
    # building based on a moving target version.
    git -C .rax-docs/repo show-ref --verify "refs/heads/$CHOSEN_VERSION" &> /dev/null && {
	DISCOVER_VERSION=true
    }
    # If we need to pin the version, get the commit hash of HEAD
    if [ "$DISCOVER_VERSION" = true ]; then
	INSTALLED_VERSION=$(git -C .rax-docs/repo rev-parse HEAD)
    else
	INSTALLED_VERSION=$CHOSEN_VERSION
    fi
    echo "Installed toolkit to .rax-docs/repo"
    echo "Version: $INSTALLED_VERSION"
    echo ""
    pause
    install_configure
}

# Tries to discover correct config settings.
function install_configure {
    CONFIGURED=false
    [ -f .rax-docs/config/bash ] && {
	echo "Loading config from config file at .rax-docs/config/bash."
	echo ""
	# Watch out: sourcing a config will load a TOOLKIT_VERSION which may differ from the
	# CHOSEN_VERSION and INSTALLED_VERSION
	# shellcheck disable=SC1091
	source .rax-docs/config/bash || fail "Failed to source config file: .rax-docs/config/bash"
	CONFIGURED=true
    }
    [ "$CONFIGURED" = false ] && [ -f Jenkinsfile ] && {
	inspect_old_jenkinsfile || fail "Inspecting Jenkinsfile failed"
	CONFIGURED=true
    }
    pause
    install_verify_config
}

# Verifies config settings with user. User can input/override settings here.
# After this function, the variables all have trusted values.
function install_verify_config {
    echo "Verify or enter the following details about your project."
    if [ -n "$GITHUB_ORG" ]; then
	read -rp "Github organization will be '$GITHUB_ORG'. Press Enter to accept, or enter new org: " ANSWER
	[ -z "$ANSWER" ] || GITHUB_ORG="$ANSWER"
    else
	read -rp "Enter Github organization: " GITHUB_ORG
    fi
    if [ -n "$GITHUB_REPO" ]; then
	read -rp "Github repository name will be '$GITHUB_REPO'. Press Enter to accept, or enter new name: " ANSWER
	[ -z "$ANSWER" ] || GITHUB_REPO="$ANSWER"
    else
	read -rp "Enter Github repository name: " GITHUB_REPO
    fi
    echo ""
    GIT_CLONE_URL="git@github.rackspace.com:$GITHUB_ORG/$GITHUB_REPO.git"
    echo "Clone URL will be $GIT_CLONE_URL"
    read -rp "Press Enter to accept, or enter new URL: " ANSWER
    [ -z "$ANSWER" ] || GIT_CLONE_URL="$ANSWER"
    echo ""
    echo "Project settings:"
    echo "Github org: $GITHUB_ORG"
    echo "Repo name : $GITHUB_REPO"
    echo "Clone url : $GIT_CLONE_URL"
    echo ""
    pause
    read -rp "Proceed with these project settings? [Y/n] " ANSWER
    echo ""
    [ "$ANSWER" = "" ] || [ "$ANSWER" = "y" ] || [ "$ANSWER" = "Y" ] || {
	echo "Halting installation."
	rm -rf .rax-docs
	return 2
    }
    mkdir -p .rax-docs/config
    cat <<EOF > .rax-docs/config/bash
GITHUB_ORG="$GITHUB_ORG"
GITHUB_REPO="$GITHUB_REPO"
GIT_CLONE_URL="$GIT_CLONE_URL"
TOOLKIT_VERSION="$INSTALLED_VERSION"
EOF
    sed 's/^/env./' > .rax-docs/config/groovy < .rax-docs/config/bash
    install_check_old_files
}

# Tries to identify if any files from the docs starter kit are present. If so, it triggers cleaning
# them up. If not, it just goes on with the installation.
function install_check_old_files {
    # If a docs project has all of these files, it's probably from the starter kit
    SIGNATURE_FILES=(
	Jenkinsfile
	Makefile
	requirements.txt
	docs/Makefile
    )
    SIGNATURE_MATCH=true
    for F in "${SIGNATURE_FILES[@]}"; do
	[ -f "$F" ] || SIGNATURE_MATCH=false
    done

    # To be extra sure, check for known Jenkins env-related commands in some of the build files.
    [ $SIGNATURE_MATCH = true ] && {
	SIGNATURE_PATTERNS=(
	    "source /opt/rh/rh-git29/enable"
	    "source jenkinspy2/bin/activate"
	)
	for P in "${SIGNATURE_PATTERNS[@]}"; do
	    grep "$P" Jenkinsfile &> /dev/null ||
		grep "$P" build.sh &> /dev/null ||
		grep "$P" scripts/build.sh &> /dev/null ||
		SIGNATURE_MATCH=false
	done
    }

    # If we made it this far without finding something that doesn't match, double check with the
    # user, and then clean up all the old stuff.
    if [ $SIGNATURE_MATCH = true ]; then
	echo "Files found from original toolkit. If you proceed, those files will be removed."
	echo "This toolkit replaces them. You'll need to commit these changes to your repository."
	echo ""
	echo "You should ABSOLUTELY NOT DO THIS if you started with a dirty working tree."
	echo "It would be difficult to recover your changes."
	echo ""
	pause
	read -rp "Proceed with removing old files? [Y/n] " CONFIRM
	echo ""
	if [ "$CONFIRM" = "" ] || [ "$CONFIRM" = "y" ] || [ "$CONFIRM" = "Y" ]; then
	    install_clean_up_old_files
	else
	    echo "Not removing old files. Halting installation."
	    exit 2
	fi
    else
	echo "The original toolkit doesn't seem to be installed here."
	echo "If it is, then this script is probably being too cautious about removing the old"
	echo "files. You can report this to the maintainers, or better, open a PR to fix it."
	echo ""
	install_go
    fi
}

# Assumes checks have already been done and handles cleaning up build-related files from the starter kit.
# There are multiple version of starter kit files out there, so this needs to try to be smart enough to
# deal with all of them.
function install_clean_up_old_files {
    NUKE_FILES=(
	Jenkinsfile
	variables.sh
	build.sh
	publish.sh
	test.sh
	requirements.txt
	Pipfile
	Pipfile.lock
	tox.ini
	Makefile
	docs/Makefile
	docs/make.bat
	scripts/build.sh
	scripts/publish.sh
	scripts/test.sh
	scripts/variables.sh
	scripts/md-rst.sh
    )
    for F in "${NUKE_FILES[@]}"; do rm -f "$F"; done
    # If we emptied the scripts dir, get rid of it.
    [ -d scripts ] && rmdir scripts &> /dev/null
    echo "Old starter kit files removed. The functionality of these removed files is now provided"
    echo "by the toolkit you're installing."
    echo ""
    install_go
}

# Takes care of the remaining installation tasks after getting past all the validation, configuration,
# and cleanup of old files. Notably, the configuration file should already be set, and the toolkit repo
# must have been cloned already, or we wouldn't be here.
function install_go {
    sed "s#{{GIT_CLONE_URL}}#$GIT_CLONE_URL#" < .rax-docs/repo/resources/Jenkinsfile > Jenkinsfile || {
        echo "Failed to replace template var Jenkinsfile."
        exit 1
    }
    IGNORE="# Ignore rax-docs installation. It should be pulled with './rax-docs get' when needed.\n.rax-docs/repo\n"
    IGNORE+="# Ignore rax-docs cache dir, where info specific to the local installation is stored.\n.rax-docs/cache"
    if ! [ -f .gitignore ]; then
	echo -e "$IGNORE" > .gitignore
    elif ! grep '^.rax-docs/repo' .gitignore > /dev/null; then
	echo -e "\n$IGNORE" >> .gitignore
    fi
    install_all_done
}

# Does post-install stuff.
function install_all_done {
    echo "Install success!"
    echo ""
    pause
    echo "Remember to commit the changes that have been made in order to reap the benefits!"
    echo ""
    pause
    echo "Alternately, if you regret your decision, and you started from a clean working tree,"
    echo "you can remove the toolkit now by running:"
    echo ""
    pause
    echo "git reset --hard"
    echo "git clean -ffd"
    echo ""
    pause
    echo "Your project's configuration items have been written to files in .rax-docs/config. I"
    echo "recommend that you also commit these files so that future runs of this tool have a"
    echo "source of truth for your project data."
    echo ""
    pause
    echo "See https://github.rackspace.com/IX/rax-docs for additional information about this toolkit."
    pause
}

# Checks ./Jenkinsfile for variables we expect to find in the original toolkit. If successful, we'll know
# the project settings, so the user doesn't have to enter them again. This function sets the project
# variables that can be derived from the Jenkinsfile. The extracted values should be verified with the
# user.
function inspect_old_jenkinsfile {
    echo "Trying to gather project settings from Jenkinsfile."
    echo ""

    # Newer version, with variables defined at the top of the Jenkinsfile like:
    # def orgName="my-org"
    VALUE_EXTRACTER="s/^.*=['\"]\(.*\)['\"]$/\1/"
    GITHUB_ORG=$(grep "^def orgName=" Jenkinsfile | sed "$VALUE_EXTRACTER")
    GITHUB_REPO=$(grep "^def repoName=" Jenkinsfile | sed "$VALUE_EXTRACTER")

    # Older version, like the one used in the engineering handbook. The whole URL is embedded in the
    # "checkout" step.
    [ -z "$GITHUB_ORG" ] && [ -z "$GITHUB_REPO" ] && {
	VALUE_MATCHER=".*git@github.rackspace.com:\(.*\)/\(.*\)\.git.*"
	GITHUB_ORG=$(grep "checkout scm:.*url: 'git@github.rackspace.com:" Jenkinsfile | sed "s#${VALUE_MATCHER}#\1#")
	GITHUB_REPO=$(grep "checkout scm:.*url: 'git@github.rackspace.com:" Jenkinsfile | sed "s#${VALUE_MATCHER}#\2#")
    }	

    if [ -z "$GITHUB_ORG" ] || [ -z "$GITHUB_REPO" ]; then
	echo "Your Jenkinsfile is in a format that I don't recognize. You can help make this tool better"
	echo "by letting my maintainers know, or better yet, submit a PR that adds handling of your"
	echo "Jenkinsfile format."
	echo ""
	pause
    fi
}

# Sets up the tools environment, either in Jenkins or for a dev.
function setup {
    if [ -n "$JENKINS_URL" ]; then
	setup_jenkins
    else
	setup_user
    fi
    # Always succeed here. Let the lower-level setup functions fail when they want to.
    return 0
}

# Sets up the Jenkins environment. This is heavily dependent on the Jenkins server where it's running and interdependent
# with the Jenkinsfile that must, unfortunately, be part of each docs project. That defines the build stages. Expect this
# sequence of calls:
# - setup
# - test
# - publish (only upon PR merge)
function setup_jenkins {
    echo "Setting up Jenkins build environment"
    echo ""
    # One-time install of pyenv. It installs to Jenkins home dir, so it can be a shared resource.
    [ -d "$PYENV_ROOT" ] || {
        mkdir -p "$PYENV_ROOT"
        curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash
        mkdir -p "$PYENV_ROOT/rax-docs-installed"
    }
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)" || fail "Installing pyenv seems to have failed. Investigate Jenkins."

    # Python install. We signal to ourselves that an install is done by touching a file. If
    # the install dir exists but the done file doesn't, we need to wait to see if someone
    # else is building it at the same time. This is the cost of sharing installations. The
    # time saved is worth it.

    INSTALL_FILE="$PYENV_ROOT/rax-docs-installed/$PYVERSION"
    if [ ! -d "$PYENV_ROOT/versions/$PYVERSION" ]; then
        # Eagerly create the dir to minimize race conditions on this directory test
        mkdir -p "$PYENV_ROOT/versions/$PYVERSION"
        SPACE_LEFT=$(df -k --output=avail . | tail -1)
        [ "$SPACE_LEFT" -gt $((500*1024)) ] || {
            rmdir "$PYENV_ROOT/versions/$PYVERSION"
            echo "Less than 500MB remaining in Jenkins home partition."
            echo "Clean up some space before installing more Pythons."
            exit 1
        }
        # Flags suggested for installing 3.4.3 on CentOS 6 to get past SSL errors
        export CFLAGS=-I/usr/include/openssl
        export LDFLAGS=-L/usr/lib64
        time pyenv install -v "$PYVERSION" && touch "$INSTALL_FILE"
        du -h --max-depth 1 "$PYENV_ROOT/versions"
    elif [ -d "$PYENV_ROOT/versions/$PYVERSION" ] && ! [ -f "$INSTALL_FILE" ]; then
        echo "Python $PYVERSION installation directory exists, but the installation"
        echo "doesn't seem to have finished. That could mean someone else is"
        echo "running a build that's building this Python now. To avoid conflicts,"
        echo "this build will now abort. Try again in a few minutes. If the problem"
        echo "persists, try deleting $PYENV_ROOT/versions/$PYVERSION and running again."
        exit 1
    fi

    [ -f "$INSTALL_FILE" ] || \
	fail "Something went wrong with installing Python $PYVERSION. Investigate Jenkins."

    pyenv local "$PYVERSION"

    # Create a venv because different versions of the toolkit might have different
    # requirements.
    python -m venv rax-docs-venv
    # shellcheck disable=SC1091
    source rax-docs-venv/bin/activate
    pip install --upgrade pip
    pip install -r .rax-docs/repo/resources/requirements.txt

    echo ""
    echo "Install vale style checker"
    # We don't have privileges outside the Jenkins workspace, so we just install the vale script to docs/bin
    # and the styles to docs/styles. They'll be reinstalled for every new build.
    wget https://github.com/errata-ai/vale/releases/download/v${VALE_VERSION}/vale_${VALE_VERSION}_Linux_64-bit.tar.gz || fail "Couldn't download Vale script"
    mkdir -p docs/lib/vale-${VALE_VERSION} || fail "Couldn't make the vale lib dir"
    tar -xvzf vale_${VALE_VERSION}_Linux_64-bit.tar.gz -C docs/lib/vale-${VALE_VERSION} || fail "Couldn't untar vale to docs/lib"
    ln -s docs/lib/vale-${VALE_VERSION}/vale docs/bin/vale || fail "Couldn't link the vale executable to docs/bin"
    mkdir -p docs/styles/Vocab || fail "Couldn't make the docs/styles/Vocab dir"
    git clone https://github.com/achatur/docs-vale.git docs/styles/docs-vale || fail "Couldn't get local styles"
    git clone https://github.com/errata-ai/Google.git docs/styles/Google || fail "Couldn't get Google styles"
    git clone https://github.com/errata-ai/Microsoft.git docs/styles/Microsoft || fail "Couldn't get MS styles"
    echo ""
}

# Sets up the dev environment, which consists of building a docker image that mimics the Jenkins that does the
# authoritative doc build.
function setup_user {
    echo "Setting up local dev environment"
    echo ""
    # shellcheck disable=SC1091
    if ! source .rax-docs/config/bash || [ -z "$TOOLKIT_VERSION" ]; then
	echo "Missing version from config file."
	echo ""
	echo "If you installed the toolkit property, there should be a config"
	echo "file at .rax-docs/config/bash that sets a variable named"
	echo "TOOLKIT_VERSION. Something appears to be wrong with your installation."
	exit 1
    fi
    docker build .rax-docs/repo/resources -t rax-docs:"$TOOLKIT_VERSION"
}

# Runs things in the dev docker image.
function docker_run {
    # Only use a specifically tagged version of the image. This will prevent weird things from happening if someone
    # works on multiple docs repos with different toolkit versions in them.
    # shellcheck disable=SC1091
    if ! source .rax-docs/config/bash || [ -z "$TOOLKIT_VERSION" ]; then
	echo "Missing version from config file."
	echo ""
	echo "If you installed the toolkit property, there should be a config"
	echo "file at .rax-docs/config/bash that sets a variable named"
	echo "TOOLKIT_VERSION. Something appears to be wrong with your installation."
	exit 1
    fi
    docker image inspect rax-docs:"$TOOLKIT_VERSION" > /dev/null || {
	echo "You need to set up your local environment first. Try running 'rax-docs setup'."
	exit 1
    }
    docker run --rm \
                -v "$PWD":/src \
                -v "$HOME"/.ssh:/ssh_config \
                -w /src \
                --dns=10.13.90.38 --dns=10.13.90.39 --dns=8.8.8.8 \
                --dns-search=rackspace.com \
                -e OUTER_PWD="$PWD" \
                -e PLEASE=true \
                --user "$(id -u)":"$(id -g)" \
                rax-docs:"$TOOLKIT_VERSION" "$@" || exit 1
}

# Runs make targets in the dev docker image.
function docker_make {
    docker_run make -C /src/docs -f /src/.rax-docs/repo/resources/Makefile "$@"
}

# Activates the build environment in Jenkins. This requires setup_jenkins to have run already, and it
# takes the appropriate steps to make all the tools active that were installed by that function. This
# is useful when a new stage of the build needs to use some of the installed tools because each
# pipeline stage starts with a fresh environment.
function activate_jenkins_env {
    # shellcheck disable=SC1091
    source /opt/rh/rh-git29/enable || fail "Failed to activate latest git on Jenkins."
    PATH="$PYENV_ROOT/bin:$PATH"
    pyenv local "$PYVERSION" || fail "Couldn't activate Python $PYVERSION"
    eval "$(pyenv init -)" || fail "Couldn't init pyenv"
    # shellcheck disable=SC1091
    source rax-docs-venv/bin/activate || fail "Couldn't activate the venv"
    PATH="$(pwd)/docs/bin:$PATH"
    export PATH
}

# Runs make targets on Jenkins.
function jenkins_make {
    activate_jenkins_env
    OUTER_PWD="$PWD" PLEASE=true make -C "$PWD"/docs -f "$PWD"/.rax-docs/repo/resources/Makefile "$@" || exit 1
}

# Runs make targets in either Jenkins or Docker, depending on the environment we're running in.
function do_make {
    if [ -n "$JENKINS_URL" ]; then
	jenkins_make "$@"
    else
	docker_make "$@"
    fi
}

function html {
    do_make html
}

function htmlvers {
    do_make htmlvers
}

function testy {
    do_make test
}

function post_build_preview {
    [ -n "$BUILD_URL" ] || {
	echo "No BUILD_URL set."
	echo ""
	echo "This command is meant to run from Jenkins, where a BUILD_URL variable is"
	echo "available."
	exit 1
    }
    [ -n "$BRANCH_NAME" ] || {
	echo "No BRANCH_NAME set."
	echo ""
	echo "This command is meant to run from Jenkins, where a BRANCH_NAME variable is"
	echo "set. The value is inspected to find the number of the PR being built."
	exit 1
    }
    [ -n "$GITHUB_SECRET" ] || {
	echo "No GITHUB_SECRET set."
	echo ""
	echo "To post the build preview, the GITHUB_SECRET variable must be set to a"
	echo "'user:pass' pair that can make POST requests to the GitHub API."
	exit 1
    }
    [ -f .rax-docs/config/bash ] || {
	echo "Config file missing"
	echo ""
	echo "The rax-docs config file at .rax-docs/config/bash must be present. This"
	echo "file is created during installation. Maybe you didn't commit it to your"
	echo "project."
	exit 1
    }
    PR_NUMBER="$(echo "$BRANCH_NAME" | cut -d '-' -f '2')"
    # shellcheck disable=SC1091
    source .rax-docs/config/bash || {
	echo "Failed to read config file"
	echo ""
	echo "The config file at .rax-docs/config/bash seems to be malformed."
	exit 1
    }
    # The Jenkins that runs this doesn't seem to have the github plugin installed, so we have to do this
    # manually. It would be nice if we could get https://github.com/jenkinsci/pipeline-github-plugin
    TEXT="Staging at ${BUILD_URL}execution/node/3/ws/docs/_build/html/index.html"
    JSON=$(echo '{"body": "BODY"}' | sed "s@BODY@$TEXT@")
    URL="https://github.rackspace.com/api/v3/repos/$GITHUB_ORG/$GITHUB_REPO/issues/$PR_NUMBER/comments"
    curl -u "$GITHUB_SECRET" -d "$JSON" "$URL" || exit 1
}

# Publishes the docs for Jenkins or for a dev.
function publish {
    if [ -n "$JENKINS_URL" ]; then
	activate_jenkins_env
	MESSAGE="Test, build, and publish with Jenkins (build # $BUILD_NUMBER)"
    else
	MESSAGE="Manually published by $USER"
    fi
    git worktree add dragons origin/gh-pages || fail "Failed to add worktree for publishing to gh-pages"
    rm -rf dragons/*
    rsync -a docs/_build/html/ dragons/
    cd dragons || fail "Failed to switch to worktree dir for publishing"
    touch .nojekyll
    git add .
    git commit -m "$MESSAGE" || fail "Failed to commit new published version"
    git push origin HEAD:gh-pages || fail "Pushing new content to gh-pages failed"
    cd - || fail "Failed to switch out of worktree dir to clean up publishing"
    # Can't use `worktree remove` until a newer version of git is available on Jenkins
    rm -rf dragons/
    git worktree prune -v
}

function usage {
    cat <<EOF
Usage: rax-docs <command> [command-options]

Build docs based on the Docs Starter Kit (https://github.rackspace.com/IX/docs-starter-kit)

DOCS BUILDING COMMANDS

     To lower the barrier of entry, this set of commands mimics those
     of the legacy tools that are built into the Docs Starter Kit in
     the form of Makefiles.

     None of these commands work until the toolkit is installed. See
     TOOLKIT MAINTENANCE COMMANDS.

     setup

	Prepares the build environment. For a user, this builds a
	local Docker image to act as your development environment. In
	Jenkins, it configures a Python virtualenv.

	You must run this command once before running any other
	commands to build docs.

	When you upgrade to a new version of the toolkit, you should
	run this command again to take advantage of updates to the
	image.

    html

	Builds HTML pages based on your current working tree
        files. Upon success, you can browse the docs with, for
        example:

	firefox docs/_build/html/index.html

    test

	Run tests on your docs sources. Tests will include spell
	checking, style checking with doc8, and style checking with
	Vale. These are the same tests the Jenkins runs on a PR.

	Note: at present, there are small differences between the
	spell checking in the local Docker container and the spell
	checking in Jenkins. The cause is unknown.

    htmlvers

        Builds HTML pages based on all the current branches and tags
        that have been pushed to GitHub. This is the version of your
        docs that will be published to GitHub Pages upon merging a
        pull request.

    publish

	Publishes your docs to GitHub Pages. This command should
	normally only be run by Jenkins. If a dev runs it manually in
	their local environment, your next Jenkins build may require
	manual intervention to resolve conflicts.

TOOLKIT MAINTENANCE COMMANDS

    install [version]

	Installs the toolkit. Use to install for the first time or to
	install a new version. Pass a git treeish available in the
	GitHub repository. Omitting the version will retrive the
	latest version.

	Tags are considered stable versions. Installing a branch will
	pin you to the commit that branch currently points at.

	This is the only command available if you've never installed
	the toolkit in your current project.

    get

	Retrieves the configured version of the toolkit from
	GitHub. Use this when you clone a docs repo that's using this
	toolkit. The toolkit configuration will be in the repository,
	but you need to fetch the actual toolkit files before using
	it.

    status

	Summarizes the local toolkit installation.

EOF
}

TOPCMD="$1"
# "test" is a bash builtin. We can't name a function that, so give the "test" command a different function name.
[ "$TOPCMD" = "test" ] && TOPCMD=testy
shift

case $TOPCMD in
    internal_install|status|usage|setup|html|htmlvers|testy|post_build_preview|publish)
	$TOPCMD "$@"
	;;

    *)
	echo "Unrecognized command: $TOPCMD"
	echo ""
	usage
	exit 1
	;;
esac
