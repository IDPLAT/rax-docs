#!/usr/bin/env groovy
/**
 * This file is installed and managed by the rax-docs toolkit.
 */
node {

    /**
     * The URL to clone. We'd like to discover this from the scm pipeline step, such as
     * via scmUrl = scm.getUserRemoteConfigs()[0].getUrl(), but permission is denied on
     * Jenkins for that. Therefore we fall back to setting this during installation of
     * the rax-docs toolkit.
     */
    def gitCloneUrl = '{{GIT_CLONE_URL}}'

    /**
     * The branch to check out when cloning. It depends on whether this is a PR or not.
     */
    def cloneBranch = env.CHANGE_BRANCH ?: env.BRANCH_NAME

    /**
     * True if this is a PR build.
     */
    def isPr = !env.CHANGE_BRANCH.isEmpty()

    stage ('Gather intel') {
        sh 'lsb_release -a'
        sh 'ls -la /opt/rh'
        sh 'git --version || echo no git'
        sh 'python --version || echo no python'
        sh 'python2 --version || echo no python2'
        sh 'python3 --version || echo no python3'
        sh 'enchant -v || echo no enchant'
    }
    stage('Check it out') {
        deleteDir()
        echo "checking out $cloneBranch"
        git branch: cloneBranch, credentialsId: 'githubSvc', url: gitCloneUrl
        sh 'git log -1'
    }
    stage('Set up build environment') {
        sh './rax-docs get'
        sh './rax-docs setup'
    }
    stage('Test') {
        sh './rax-docs test'
    }
    if (isPr) {
        stage ('Stage preview HTML') {
            withCredentials([usernameColonPassword(credentialsId: 'SVCwPAT', variable: 'GITHUB_SECRET')]) {
	        sh './rax-docs post_build_preview'
            }
	}
    } else {
        stage("Release stuff") {
            sh './rax-docs htmlvers'
            sh './rax-docs publish'
        }
    }
}
